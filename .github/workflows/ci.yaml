name: ci

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  release:
    types:
      # If you want a workflow to run when stable and pre-releases publish, subscribe to published instead of released and prereleased.
      # <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release>
      - published

permissions: read-all

env:
  DIZBOX_NAMESPACE_NAME: bzkf-dizbox
  IMAGE_NAME: ghcr.io/${{ github.repository }}/decompose-xmls

jobs:
  build:
    name: build decompose_xmls container image
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    outputs:
      image-tags: ${{ steps.container_meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-name: ${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2

      - name: Container meta
        id: container_meta
        uses: docker/metadata-action@c4ee3adeed93b1fa6a762f209fb01608c1a22f1e # v4
        with:
          images: |
            ${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          context: src/decompose_xmls
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_meta.outputs.tags }}
          labels: ${{ steps.container_meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}

      # - name: Run unit tests
      #   id: docker_build_unit_test
      #   uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
      #   with:
      #     context: src/decompose_xmls
      #     push: false
      #     target: test

  test:
    runs-on: ubuntu-22.04
    needs:
      - build
    steps:
      - name: install k3s
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.26.1+k3s1 sh -

      - name: setup .kube/config
        run: |
          mkdir ~/.kube
          sudo k3s kubectl config view --raw | tee ~/.kube/config > /dev/null
          chmod 600 ~/.kube/config

      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: install dependencies
        run: |
          kubectl get node

          # via <https://stackoverflow.com/a/65411733>
          kubectl create namespace "${DIZBOX_NAMESPACE_NAME}" --dry-run=client -o yaml | kubectl apply -f -
          kubectl config set-context --current --namespace="${DIZBOX_NAMESPACE_NAME}"

          kubectl config view

          helm repo add strimzi https://strimzi.io/charts/
          helm dependency build charts/prerequisites
          helm upgrade --install --wait --timeout=10m diz-in-a-box-prerequisites charts/prerequisites

          kubectl apply -f k8s/
          kubectl wait kafka/bzkf-dizbox-cluster --for=condition=Ready --timeout=300s
          kubectl wait kafkabridge/bzkf-dizbox-bridge --for=condition=Ready --timeout=300s

          kubectl apply -f k8s/kafka-bridge.yaml
          kubectl wait kafkabridge/bzkf-dizbox-bridge --for=condition=Ready --timeout=300s

          kubectl get all -A

      - name: install diz-in-a-box
        run: |
          helm repo add miracum https://miracum.github.io/charts
          helm repo add akhq https://akhq.io/
          helm repo add hapi-fhir-jpaserver-starter https://hapifhir.github.io/hapi-fhir-jpaserver-starter

          helm dependency build charts/diz-in-a-box
          helm upgrade --install --wait --timeout=10m diz-in-a-box charts/diz-in-a-box

          kubectl get all -A

      - name: test deployments
        run: |
          helm test diz-in-a-box

          kubectl wait deployment/diz-in-a-box-stream-processors-onkoadt-to-fhir --for=condition=Available --timeout=300s
          kubectl wait deployment/diz-in-a-box-stream-processors-fhir-to-server --for=condition=Available --timeout=300s

      - name: Print cluster logs
        if: always()
        run: |
          kubectl cluster-info dump -o yaml | tee kind-cluster-dump.txt

      - name: Upload cluster dump
        if: always()
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: kind-cluster-dump.txt
          path: |
            kind-cluster-dump.txt

  build-air-gapped-installer:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - run: |
          ./build-air-gapped-installer.sh

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    permissions:
      actions: read
      contents: write # for release notes
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading container images, signatures, and attestations.
    needs:
      - test
    uses: ./.github/workflows/release.yaml
